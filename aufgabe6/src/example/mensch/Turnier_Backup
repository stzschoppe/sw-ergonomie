package mensch;  /** * Class Turnier - die Hauptklasse des Spiels. *  *  Es handelt sich um ein sehr einfaches, textbasiertes Spiel. *  Dieses Spiel wird erst interessant, wenn man es ausbaut! *   *  @author (Lothar Schmitz)  *  @version (20.06.04) */class Turnier {    private Spieler dran;    private int aktiveSpieler;    private boolean entschieden;    private int rad = 15;    private int x = rad * 2;    private int y = (5 * rad * 3) + x;            // Arrays fuer die Koordinatenzuweisung    private Koord[] ringArray = new Koord[48];        private Koord[] nestschwarz = new Koord[4];    private Koord[] nestrot = new Koord[4];    private Koord[] nestblau = new Koord[4];    private Koord[] nestgelb = new Koord[4];    private Koord[] hausschwarz = new Koord[4];    private Koord[] hausrot = new Koord[4];    private Koord[] hausblau = new Koord[4];    private Koord[] hausgelb = new Koord[4];        public static void main(String[] args) {        // Spielplan und Spieler mit Figuren etc anlegen        Turnier t = new Turnier();        t.spiele();    }    /**     * Spiel anlegen.<P>     * Achtung!<BR>     * Um das Spiel starten zu können muss der Radius in Turnier groesser 5 sein.     */    public Turnier()  {       // Den Parcours anlegen ...       Feld[] ring = new Feld[48];        // Start Erzeugung von ringArray-Koordinaten.        for (int i = 0; i < 48; i++) {            if (i < 5) {                ringArray[i] = new Koord(x,y);                x = x + (rad * 3);            } else if (i < 10) {                ringArray[i] = new Koord(x,y);                y = y - (rad * 3);            } else if (i < 12) {                ringArray[i] = new Koord(x,y);                x = x + (rad * 3);            } else if (i < 17) {                ringArray[i] = new Koord(x,y);                y = y + (rad * 3);            } else if (i < 22) {                ringArray[i] = new Koord(x,y);                x = x + (rad * 3);            } else if (i < 24) {                ringArray[i] = new Koord(x,y);                y = y + (rad * 3);            } else if (i < 29) {                ringArray[i] = new Koord(x,y);                x = x - (rad * 3);            } else if (i < 34) {                ringArray[i] = new Koord(x,y);                y = y + (rad * 3);            } else if (i < 36) {                ringArray[i] = new Koord(x,y);                x = x - (rad * 3);            } else if (i < 41) {                ringArray[i] = new Koord(x,y);                y = y - (rad * 3);            } else if (i < 46) {                ringArray[i] = new Koord(x,y);                x = x - (rad * 3);            } else {                ringArray[i] = new Koord(x,y);                y = y - (rad * 3);            };       }; // Ende Erzeugung von ringArray-Koordinaten.       // Schwarzes Nest erstellen       for (int i = 0; i < 4; i++) {           if (i == 0) {nestschwarz[i] = new Koord (x,x);}           else if (i == 1) {nestschwarz[i] = new Koord (x + (6 * rad),x);}           else if (i == 2) {nestschwarz[i] = new Koord (x + (6 * rad), x + (6 * rad));}           else {nestschwarz[i] = new Koord (x, x + (6 * rad));};       }; // Ende schwarzes Nest       // Rotes Nest erstellen       for (int i = 0; i < 4; i++) {           if (i == 0) {nestrot[i] = new Koord (ringArray[20].getX(),x);}           else if (i == 1) {nestrot[i] = new Koord (ringArray[20].getX() + (6 * rad),x);}           else if (i == 2) {nestrot[i] = new Koord (ringArray[20].getX() + (6 * rad), x + (6 * rad));}           else {nestrot[i] = new Koord (ringArray[20].getX(), x + (6 * rad));};       }; // Ende rotes Nest       // Blaues Nest erstellen       for (int i = 0; i < 4; i++) {           if (i == 0) {nestblau[i] = new Koord (ringArray[20].getX(),ringArray[20].getX());}           else if (i == 1) {nestblau[i] = new Koord (ringArray[20].getX() + (6 * rad),ringArray[20].getX());}           else if (i == 2) {nestblau[i] = new Koord (ringArray[20].getX() + (6 * rad), ringArray[20].getX() + (6 * rad));}           else {nestblau[i] = new Koord (ringArray[20].getX(), ringArray[20].getX() + (6 * rad));};       }; // Ende blaues Nest              // Gelbes Nest erstellen       for (int i = 0; i < 4; i++) {           if (i == 0) {nestgelb[i] = new Koord (x,ringArray[38].getY());}           else if (i == 1) {nestgelb[i] = new Koord (x + (6 * rad),ringArray[38].getY());}           else if (i == 2) {nestgelb[i] = new Koord (x + (6 * rad), ringArray[38].getY() + (6 * rad));}           else {nestgelb[i] = new Koord (x, ringArray[38].getY() + (6 * rad));};       }; // Ende gelbes Nest           //       // Schwarzes Haus erstellen       for (int i = 0; i < 4; i++) {           if (i == 0) {hausschwarz[i] = new Koord (ringArray[1].getX(),ringArray[47].getY());}           else {hausschwarz[i] = new Koord (ringArray[1].getX() + (i*3 * rad),ringArray[47].getY());};       }; // Ende schwarzes Haus       // Rotes Haus erstellen       for (int i = 0; i < 4; i++) {           if (i == 0) {hausrot[i] = new Koord (ringArray[11].getX(),ringArray[9].getY());}           else {hausrot[i] = new Koord (ringArray[11].getX(), ringArray[9].getY() + (i * 3 * rad));};       }; // Ende rotes Haus       // Blaues Haus erstellen       for (int i = 0; i < 4; i++) {           if (i == 0) {hausblau[i] = new Koord (ringArray[21].getX(),ringArray[47].getY());}           else {hausblau[i] = new Koord (ringArray[21].getX() - (i * 3 * rad), ringArray[47].getY());};       }; // Ende blaues Haus              // Gelbes Haus erstellen       for (int i = 0; i < 4; i++) {           if (i == 0) {hausgelb[i] = new Koord (ringArray[11].getX(),ringArray[33].getY());}           else {hausgelb[i] = new Koord (ringArray[11].getX(), ringArray[33].getY() - (i * 3 * rad));};       }; // Ende gelbes Haus                              // Die Ringbahn auf dem Canvas darstellen       for (int j = 0; j < 48; j++) {           ring[j] = new Feld();           ring[j].scheibe = new Scheibe(ringArray[j], "white", rad);       };       // ... und verketten.       int iAlt = 47;       for (int i = 0; i < 48; i++) {           ring[i].setVorgaenger(ring[iAlt]);           ring[iAlt].setNachfolger(ring[i]);           iAlt = i;       };       // Die Spieler anlegen ...       Spieler rot     = new Spieler (this, "red", ring[12], nestrot, hausrot, rad);       Spieler blau    = new Spieler (this, "blue", ring[24], nestblau, hausblau, rad);       Spieler gelb    = new Spieler (this, "yellow", ring[36], nestgelb, hausgelb, rad);       Spieler schwarz = new Spieler (this, "black", ring[0], nestschwarz, hausschwarz, rad);       // ... und verketten.       rot.setNaechster(blau);       blau.setNaechster(gelb);       gelb.setNaechster(schwarz);       schwarz.setNaechster(rot);       // Rot fängt an!       dran = rot;       entschieden = false;       if (rad < 5) {           entschieden = true;           System.out.println("\nDer Radius ist zu klein (Radius < 5).\n");           System.out.println("\nBitte den Radius in Turnier erhoehen\n");}    }    /**     *  Ein Spiel durchführen.     */    public void spiele()  {           aktiveSpieler = 4;                begruessung();        // Solange Zuege ausfuehren,        // bis zum Sieg        // oder bis alle aufgegeben haben        while (! entschieden) {            dran.spiele();            dran = dran.getNaechster();        }        Canvas Leinwand = Canvas.getCanvas(rad);        Leinwand.setVisible(false);        Leinwand = null;        System.gc();        System.out.println("\nAuf Wiedersehen!\n");    }        /**     * Anfangsbildschirm drucken.     */    private void begruessung() {        System.out.println("\n>>> Willkommen beim Mensch-Ärgere-Dich-Nicht-Spiel <<<\n"         + "\nMit '?' erhalten Sie jeweils eine Liste aller Eingabemöglichkeiten\n");    }        /**     * Ein Spieler scheidet aus.     */    public void ausscheiden() {        aktiveSpieler--;        if (aktiveSpieler == 0)           beenden();    }        /**     * Ein Spieler scheidet aus.     */    public void beenden() {        entschieden = true;    }}