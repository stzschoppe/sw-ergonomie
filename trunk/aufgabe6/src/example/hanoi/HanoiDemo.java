package hanoi;import shell.Command;import shell.CommandHandler;import shell.Shell;import shell.StringParameter;import shell.tools.HaltCommand;/** * Class HanoiDemo - die Hauptklasse der Simulation. *  *  Es handelt sich um ein sehr einfaches, textbasiertes Spiel. *  Dieses Spiel wird erst interessant, wenn man es ausbaut! *  *  Um die Simulation zu starten, erzeugen Sie ein "HanoiDemo"-Objekt  *  und rufen Sie dessen "play"-Methode auf. *  *  Diese Klasse baut eine Konfiguration auf, legt den Parser an,  *  der die Benutzereingaben entschluesselt und startet die Simulation.   *  Hier werden auch die vom Parser entschlüsselten Kommandos interpretiert. *   *  HIER UMGEBAUT ZUM KOMMANDOINTERPRETER FUER HANOI!! *   *  @author (adaptiert von Lothar Schmitz)  */class HanoiDemo {    private Konfiguration aktuell;            public static void main(String[] args) {       (new HanoiDemo(3)).play();    }    /**     * Spiel anlegen.     */    public HanoiDemo(int n)  {    	createCommands();        aktuell = new Konfiguration(20,20, n,"A","B","C");        Shell.getInstance().outln(aktuell.toString());    }        /**     * Erstellt die commands für die shell     *      *                                "animiert", "schnell",      */    private void createCommands(){ 	    	    	Command vorCommand = (new Command("vor", "Animation n Schritte vorspulen.", new CommandHandler(){    					@Override			public void execute(Command command) {				vorText(command.getParameterByName("param").getValueAsString());							}}));    	vorCommand.addParameter(new StringParameter("param", "Anzahl der Schritte."));    	    	Shell.getInstance().addCommand(vorCommand);    	    	Shell.getInstance().addCommand(new Command("vor", "Animation n Schritte vorspulen.", new CommandHandler(){    					@Override			public void execute(Command command) {				vorText(null);			}}));    	    	    	    	Command rueckCommand = (new Command("rueck", "Animation n Schritte zurückspulen.", new CommandHandler(){    					@Override			public void execute(Command command) {				rueckText(command.getParameterByName("param").getValueAsString());							}}));    	rueckCommand.addParameter(new StringParameter("param", "Anzahl der Schritte."));    	    	Shell.getInstance().addCommand(rueckCommand);    	    	Shell.getInstance().addCommand(new Command("rueck", "Animation n Schritte zurückspulen.", new CommandHandler(){    					@Override			public void execute(Command command) {				rueckText(null);			}}));    	    	    	Shell.getInstance().addCommand(new Command("zuege", "Zeigt die Zuege der Demo.", new CommandHandler(){    					@Override			public void execute(Command command) {				zuegeText();			}}));    	    	Shell.getInstance().addCommand(new Command("anfang", "Zum Anfang von der Demo.", new CommandHandler(){    					@Override			public void execute(Command command) {				zumAnfangText();			}}));    	    	Shell.getInstance().addCommand(new Command("ende", "Zum Ende von der Demo.", new CommandHandler(){    					@Override			public void execute(Command command) {				zumEndeText();			}}));    	    	Shell.getInstance().addCommand(new Command("animiert", "Aktiviert die Animation der Demo.", new CommandHandler(){    					@Override			public void execute(Command command) {				setzeAnimiert(true);			}}));    	    	Shell.getInstance().addCommand(new Command("schnell", "Deaktiviert die Animation der Demo.", new CommandHandler(){    					@Override			public void execute(Command command) {				setzeAnimiert(false);			}}));    	//geht genauso wenig wie der nächste ansatz    	Shell.getInstance().addCommand(new Command("stop", "Beendet die Demo.", new CommandHandler(){						@Override			public void execute(Command command) {				Shell.getInstance().halt();							}}));    	    //	Shell.getInstance().addCommand(new HaltCommand("stop", "Beendet die Demo.")); //funzt nich, ka warum    }    /**     *  Zentrale Verarbeitungsschleife.     */    public void play()     {        Shell.getInstance().outln(">>> Willkommen beim Türme-von-Hanoi-Spiel <<<"    			+ "\n" + "Mit dem Kommando '?' erhalten Sie eine Liste aller Kommandos");        Shell.getInstance().run();    }    // Implementierung der Befehle    /**      * Vorwaerts gehen um angegebene Schrittzahl (default: 1 Schritt).     */    private void vorText(String parameter)  {        if (parameter == null) {           aktuell.vor();        }        else {           try {aktuell.vor(Integer.parseInt(parameter));           }           catch (NumberFormatException nfe) {             System.out.println("Parameter ist keine ganze Zahl!!!");            }        }        System.out.println(aktuell);    }    /**      * Zugliste anzeigen.     */    private void zuegeText()  {        System.out.println(aktuell.zuegeToString());    }    /**      * Rueckwaerts gehen um angegebene Schrittzahl (default: 1 Schritt).     */    private void rueckText(String parameter)  {        if (parameter == null) {           aktuell.rueck();        }        else {           try {aktuell.rueck(Integer.parseInt(parameter));           }           catch (NumberFormatException nfe) {             System.out.println("Parameter ist keine ganze Zahl!!!");            }        }        System.out.println(aktuell);    }    /**      * Zugfolge rueckwaerts bis zum Anfang abarbeiten.     */    private void zumAnfangText()  {        aktuell.zumAnfang();        System.out.println(aktuell);    }    /**      * Zugfolge bis zum Ende abarbeiten.     */    private void zumEndeText()  {        aktuell.zumEnde();        System.out.println(aktuell);    }        /**      * Zugliste anzeigen.     */    private void setzeAnimiert(boolean animiert)  {        aktuell.setzeAnimiert(animiert);    }}